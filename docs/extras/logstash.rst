:mod:`extras.logstash` --- Logstash Server Emulation
=====================================================

.. module:: extras.logstash
    :synopsis: Emulating Logstash server.

-------

An emulated, lightweight server that resembles Logstash.

Example usage::

    >>> import socket
    >>> import time
    >>> ls = FakeLogstashService()
    >>> ls.start()
    >>> # Logstash Handler internally creates this connection and sends a log.
    >>> s = socket.create_connection((ls.local_host, ls.port))
    >>> s.sendall(b'{"record": "value", "level": "ERROR"}\\n')
    >>> s.close()
    >>> time.sleep(0.01)  # Wait for service to process message
    >>> ls.stop()
    >>> ls.assert_logs("ERROR")
    >>> assert ls.records[0]["record"] == "value"

.. class:: FakeLogstashService(port=0)

    Implements a fake logging service that closely resembles Logstash.

    Accepts external TCP connections, with logs received in the "json_lines"
    format.

    If *port* is specified, it should be the port you wish to bind the server
    to. Otherwise, a random available port is chosen by the OS and stored in
    :attr:`port`.

    Inherits from :class:`~service.YellowService`.

    .. attribute:: records

        A list of all records received.

        Each record is a dictionary that has the same keys as expected by
        Logstash, and is generated by Python's numerous Logstash packages.

        The records have at least the following keys in common:

        * @timestamp: Log timestamp in ISO-8601 format.
        * @version: Logstash format version as a string. (always 1)
        * message: Log message as a string.
        * host: Host sending the message.
        * path: Path to the module writing the log as a string.
        * tags: List of tags as strings.
        * type: Always "Logstash".
        * level: An all upper-case name of the log level.
        * logger_name: Logger name.
        * stack_info: Formatted stacktrace if one exists, otherwise ``None``.

        More keys may be added by the specific software sending the logs.

        You are welcome to modify, clear or iterate over this during runtime.
        New logs will be added in the order they were received.

    .. attribute:: port

        Dynamic port external service should connect to.

        FakeLogstashService automatically binds a free port during
        initialization unless chosen otherwise.

    .. attribute:: local_host

        Host to connect to from the local machine (i.e. "localhost")

    .. attribute:: container_host

        Host to connect to from inside containers.

    .. attribute:: encoding

        Encoding of the json lines received. Defaults to ``"utf-8"`` per
        specification.

    .. attribute:: delimiter

        Delimiter splitting between json objects. Defaults to ``b'\n'`` per
        specification.

    Has the following additional methods:

    .. method:: filter_records(level)

        Iterate over records in the given *level* or above.

        *level* can be a string or an integer.

        Returns an iterator.

    .. method:: assert_logs(level)

        Asserts that log messages were received in the given *level* or above.

        Resembles unittest's :meth:`~unittest.TestCase.assertLogs`.

        *level* can be a string or an integer.

        Raises :class:`AssertionError` if no logs above the given level were
        received.

    .. method:: assert_no_logs(level)

        Asserts that no log messages were received in the given *level* or above.

        *level* can be a string or an integer.

        Raises :class:`AssertionError` if a log above the given level was
        received.
